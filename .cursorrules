# NPS Workers 프로젝트 개발 규칙

## Git 브랜치 작업 루틴
- 새 기능 개발 시: develop 브랜치에서 feature/기능명 브랜치 생성
- 버그 수정 시: develop 브랜치에서 fix/버그설명 브랜치 생성
- 문서 작업 시: develop 브랜치에서 docs/문서명 브랜치 생성
- 리팩토링 시: develop 브랜치에서 refactor/리팩토링명 브랜치 생성

## 커밋 메시지 규칙
- feat: 새 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- style: 코드 스타일 변경 (포맷팅, 세미콜론 등)
- refactor: 코드 리팩토링 (기능 변경 없음)
- test: 테스트 추가/수정
- chore: 빌드/설정 변경 (의존성, 설정 파일 등)
- perf: 성능 개선

## 작업 흐름
1. develop 브랜치에서 최신 상태로 업데이트 (git pull origin develop)
2. 적절한 브랜치 생성 및 전환 (git checkout -b feature/기능명)
3. 작업 후 의미있는 커밋 메시지로 커밋
4. 원격에 push (git push)
5. Pull Request 생성
6. 승인 후 develop merge
7. 완료된 브랜치 삭제 (로컬 및 원격)

## 코드 스타일
- Python 코드는 PEP 8 스타일 가이드 준수
- 함수와 클래스에는 docstring 작성
- 변수명은 snake_case 사용
- 클래스명은 PascalCase 사용
- 상수는 UPPER_CASE 사용

## 파일 구조
- nps_workers.py: 메인 실행 파일
- nps_cache.py: SQLite 캐시 시스템
- nps_sync.py: 동기화 관리
- nps_save.py: Supabase 데이터베이스 연결
- cache_manager.py: 캐시 관리 유틸리티

## 데이터베이스 작업
- SQLite 로컬 캐시 우선 사용
- Supabase 조회 횟수 최소화
- 캐시 만료 시간 적절히 설정 (기본 24시간)
- 동기화 실패 시 재시도 로직 구현

## 에러 처리
- 모든 API 호출에 try-catch 블록 사용
- 데이터베이스 연결 실패 시 적절한 에러 메시지 출력
- 사용자에게 명확한 에러 메시지 제공